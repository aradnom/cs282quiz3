#include <iostream>
#include <chrono>
#include <thread>
#include <cstdlib>
#include "clock.h"
#include "math.h"

using namespace std;

simphys::Clock::Clock( float startTime = 0.0f ) {
	freq = pow( 10, 6 );
	timeScale = 1.0f;
	ticks = secondsToTicks( startTime );
}

long long simphys::Clock::secondsToTicks ( float seconds ) const {
	return seconds * freq;
}

float simphys::Clock::ticksToSeconds(long long ticks) const {
	return ticks / freq;
}

void simphys::Clock::setFreq ( float newFreq ) {
	freq = newFreq;
}

float simphys::Clock::getFreq () const {
	return freq;
}

void simphys::Clock::setScale ( float newScale ) {
	timeScale = newScale;
}

float simphys::Clock::getScale () const {
	return timeScale;
}

void simphys::Clock::setPaused( bool isPaused ) {
	paused = isPaused;
}

bool simphys::Clock::getPaused() const {
	return paused;
}

long long simphys::Clock::getTicks() const {
	return ticks;
}

void simphys::Clock::update( float dt) {
	if ( !paused ) // Update only if not paused
		ticks += ( secondsToTicks( dt ) * timeScale );
}

